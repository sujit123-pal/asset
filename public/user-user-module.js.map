{"version":3,"sources":["./src/app/views/user/forgot-password/forgot-password.component.ts","./src/app/views/user/forgot-password/forgot-password.component.html","./src/app/views/user/login/login.component.ts","./src/app/views/user/login/login.component.html","./src/app/views/user/register/register.component.ts","./src/app/views/user/register/register.component.html","./src/app/views/user/reset-password/reset-password.component.ts","./src/app/views/user/reset-password/reset-password.component.html","./src/app/views/user/user.component.ts","./src/app/views/user/user.component.html","./src/app/views/user/user.module.ts","./src/app/views/user/user.routing.ts"],"names":[],"mappings":"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","file":"user-user-module.js","sourcesContent":["import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { NgForm } from '@angular/forms';\r\nimport { NotificationsService, NotificationType } from 'angular2-notifications';\r\nimport { Router } from '@angular/router';\r\nimport { AuthService } from 'src/app/shared/auth.service';\r\n\r\n@Component({\r\n  selector: 'app-forgot-password',\r\n  templateUrl: './forgot-password.component.html',\r\n})\r\nexport class ForgotPasswordComponent implements OnInit {\r\n  @ViewChild('passwordForm') passwordForm: NgForm;\r\n  buttonDisabled = false;\r\n  buttonState = '';\r\n\r\n  constructor(private authService: AuthService, private notifications: NotificationsService, private router: Router) { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  onSubmit() {\r\n    if (!this.passwordForm.valid || this.buttonDisabled) {\r\n      return;\r\n    }\r\n    this.buttonDisabled = true;\r\n    this.buttonState = 'show-spinner';\r\n    /*\r\n    this.authService.sendPasswordEmail(this.passwordForm.value.email).then(() => {\r\n      this.notifications.create('Done', 'Password reset email is sent, you will be redirected to Reset Password page!', NotificationType.Bare, { theClass: 'outline primary', timeOut: 6000, showProgressBar: true });\r\n      this.buttonDisabled = false;\r\n      this.buttonState = '';\r\n      setTimeout(() => {\r\n        this.router.navigate(['user/reset-password']);\r\n      }, 6000);\r\n\r\n    }).catch((error) => {\r\n      this.notifications.create('Error', error.message, NotificationType.Bare, { theClass: 'outline primary', timeOut: 6000, showProgressBar: false });\r\n      this.buttonDisabled = false;\r\n      this.buttonState = '';\r\n    });\r\n    */\r\n  }\r\n\r\n}\r\n","<div class=\"card auth-card\">\r\n  <div class=\"position-relative image-side \">\r\n    <p class=\" text-white h2\">MAGIC IS IN THE DETAILS</p>\r\n    <p class=\"white mb-0\">\r\n      Please use your e-mail to reset your password.\r\n      <br>If you are not a member, please\r\n      <a routerLink=\"/user/register\" class=\"white white-underline-link\">register</a>.\r\n    </p>\r\n  </div>\r\n  <div class=\"form-side\">\r\n    <a class=\"c-pointer\">\r\n      <span class=\"logo-single\"></span>\r\n    </a>\r\n    <h6 class=\"mb-4\">Forgot Password</h6>\r\n\r\n    <form #passwordForm=\"ngForm\" novalidate  (ngSubmit)=\"onSubmit()\">\r\n      <label class=\"form-group has-float-label\">\r\n        <input class=\"form-control\" required email ngModel #email=\"ngModel\" name=\"email\"/>\r\n        <span>{{ 'user.email' | translate }}</span>\r\n        <div *ngIf=\"!email.valid && passwordForm.submitted\" class=\"invalid-tooltip\">Email is required!</div>\r\n        <div *ngIf=\"email?.errors?.email && passwordForm.submitted\" class=\"invalid-tooltip\">Email must be a valid address!</div>\r\n      </label>\r\n      <div class=\"d-flex justify-content-between align-items-center\">\r\n        <a routerLink=\"/user/login\">{{ 'user.login-button' | translate }}</a>\r\n        <app-state-button [btnClass]=\"'btn btn-primary btn-lg btn-shadow'\" [currentState]=\"buttonState\"\r\n          [isDisabled]=\"buttonDisabled\" click=\"onLoginClick()\">\r\n          {{ 'user.reset-password-button' | translate | uppercase }}\r\n        </app-state-button>\r\n      </div>\r\n    </form >\r\n\r\n  </div>\r\n</div>\r\n<simple-notifications></simple-notifications>\r\n","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { NgForm } from '@angular/forms';\r\nimport { NotificationsService, NotificationType } from 'angular2-notifications';\r\nimport { Router } from '@angular/router';\r\nimport { AuthService } from 'src/app/shared/auth.service';\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n})\r\nexport class LoginComponent implements OnInit {\r\n  @ViewChild('loginForm') loginForm: NgForm;\r\n\r\n  buttonDisabled = false;\r\n  buttonState = '';\r\n\r\n  constructor(\r\n    private authService: AuthService,\r\n    private notifications: NotificationsService,\r\n    private router: Router\r\n  ) {}\r\n\r\n  ngOnInit() {}\r\n\r\n  onSubmit() {\r\n    if (!this.loginForm.valid || this.buttonDisabled) {\r\n      return;\r\n    }\r\n    this.buttonDisabled = true;\r\n    this.buttonState = 'show-spinner';\r\n    this.authService.login(this.loginForm.value).subscribe(\r\n      <Response>(data) => {\r\n        console.log(data);\r\n        if (data.status == '900') {\r\n          this.notifications.create(\r\n            'Welcome',\r\n            data.message,\r\n            NotificationType.Success,\r\n            {\r\n              theClass: 'outline primary',\r\n              timeOut: 6000,\r\n              showProgressBar: false,\r\n            }\r\n          );\r\n          this.buttonDisabled = false;\r\n          this.buttonState = '';\r\n          localStorage.setItem('usr_token', data.token)\r\n          localStorage.setItem('usr_name', this.loginForm.value.username)\r\n          this.router.navigateByUrl('/app')\r\n        } else {\r\n          this.notifications.create(\r\n            'Error',\r\n            'Login Failed:'+data.message,\r\n            NotificationType.Error,\r\n            {\r\n              theClass: 'outline primary',\r\n              timeOut: 6000,\r\n              showProgressBar: false,\r\n            }\r\n          );\r\n          this.buttonDisabled = false;\r\n          this.buttonState = '';\r\n        }\r\n      },\r\n      (err) => {\r\n        this.notifications.create(\r\n          'Error',\r\n          'Login Failed, due to some error.',\r\n          NotificationType.Error,\r\n          {\r\n            theClass: 'outline danger',\r\n            timeOut: 6000,\r\n            showProgressBar: false,\r\n          }\r\n        );\r\n        this.buttonDisabled = false;\r\n        this.buttonState = '';\r\n      }\r\n    );\r\n  }\r\n}\r\n","<div class=\"card auth-card\">\r\n  <div class=\"position-relative image-side \">\r\n    <p class=\" text-white h2\">MAGIC IS IN THE DETAILS</p>\r\n    <p class=\"white mb-0\">\r\n      Please use your credentials to login.\r\n      <br>If you are not a member, please\r\n      <a routerLink=\"/user/register\" class=\"white white-underline-link\">register</a>.\r\n    </p>\r\n  </div>\r\n  <div class=\"form-side\">\r\n    <a class=\"c-pointer\">\r\n      <span class=\"logo-single\"></span>\r\n    </a>\r\n    <h6 class=\"mb-4\">Login</h6>\r\n\r\n    <form #loginForm=\"ngForm\" novalidate (ngSubmit)=\"onSubmit()\">\r\n      <label class=\"form-group has-float-label\">\r\n        <input class=\"form-control\" required ngModel #username=\"ngModel\" name=\"username\" />\r\n        <span>Username</span>\r\n        <div *ngIf=\"!username.valid && loginForm.submitted\" class=\"invalid-tooltip\">Email is required!</div>\r\n      </label>\r\n      <label class=\"form-group has-float-label\">\r\n        <input class=\"form-control\" type=\"password\" placeholder=\"\" required ngModel #password=\"ngModel\" name=\"password\" />\r\n        <span>Password</span>\r\n        <div *ngIf=\"!password.valid && loginForm.submitted\" class=\"invalid-tooltip\">Password is required!</div>\r\n      </label>\r\n      <div class=\"d-flex justify-content-between align-items-center\">\r\n        <a routerLink=\"/user/forgot-password\">{{ 'user.forgot-password' | translate }}?</a>\r\n        <app-state-button [btnClass]=\"'btn btn-primary btn-lg btn-shadow'\" [currentState]=\"buttonState\"\r\n          [isDisabled]=\"buttonDisabled\" click=\"onLoginClick()\">\r\n          {{ 'user.login-button' | translate | uppercase }}\r\n        </app-state-button>\r\n      </div>\r\n    </form>\r\n\r\n  </div>\r\n</div>\r\n<simple-notifications></simple-notifications>\r\n","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { AuthService } from 'src/app/shared/auth.service';\r\nimport { NotificationsService, NotificationType } from 'angular2-notifications';\r\nimport { Router } from '@angular/router';\r\nimport { NgForm, NgModel } from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'app-register',\r\n  templateUrl: './register.component.html',\r\n})\r\nexport class RegisterComponent implements OnInit {\r\n  @ViewChild('registerForm') registerForm: NgForm;\r\n\r\n  buttonDisabled = false;\r\n  buttonState = '';\r\n\r\n  constructor(\r\n    private authService: AuthService,\r\n    private notifications: NotificationsService,\r\n    private router: Router\r\n  ) {}\r\n\r\n  ngOnInit() {}\r\n\r\n  onSubmit() {\r\n    if (!this.registerForm.valid || this.buttonDisabled) {\r\n      return;\r\n    }\r\n    this.buttonDisabled = true;\r\n    this.buttonState = 'show-spinner';\r\n    this.authService.register(this.registerForm.value).subscribe(\r\n      <Response>(data) => {\r\n        if (data.status == '900') {\r\n          console.log('Registration Successfull');\r\n          this.notifications.create(\r\n            data.message,\r\n            'Taking you the application.',\r\n            NotificationType.Success,\r\n            {\r\n              theClass: 'outline success',\r\n              timeOut: 6000,\r\n              showProgressBar: false,\r\n            }\r\n          );\r\n          this.router.navigateByUrl('/user/login');\r\n        } else {\r\n          this.notifications.create(\r\n            'Error: Registration',\r\n            data.message,\r\n            NotificationType.Error,\r\n            {\r\n              theClass: 'outline danger',\r\n              timeOut: 6000,\r\n              showProgressBar: false,\r\n            }\r\n          );\r\n          this.buttonDisabled = false;\r\n          this.buttonState = '';\r\n        }\r\n      },\r\n      (err) => {\r\n        this.notifications.create(\r\n          'Error',\r\n          'Registrayion failed, due to unknown error.',\r\n          NotificationType.Error,\r\n          { theClass: 'outline danger', timeOut: 6000, showProgressBar: false }\r\n        );\r\n        this.buttonDisabled = false;\r\n        this.buttonState = '';\r\n      }\r\n    );\r\n  }\r\n}\r\n","<div class=\"card auth-card\">\r\n  <div class=\"position-relative image-side p-md-5\">\r\n    <p class=\"text-white h2\">MAGIC IS IN THE DETAILS</p>\r\n    <p class=\"white mb-0\">\r\n      Please use the form to register.\r\n      <br />If you are a member, please\r\n      <a routerLink=\"/user/login\" class=\"white white-underline-link\">login</a>.\r\n    </p>\r\n  </div>\r\n  <div class=\"form-side p-md-5\">\r\n    <a class=\"c-pointer\">\r\n      <span class=\"logo-single\"></span>\r\n    </a>\r\n    <h6 class=\"mb-4\">Register</h6>\r\n\r\n    <form #registerForm=\"ngForm\" novalidate (ngSubmit)=\"onSubmit()\">\r\n      <label class=\"form-group has-float-label\">\r\n        <input\r\n          class=\"form-control\"\r\n          required\r\n          ngModel\r\n          #firstname=\"ngModel\"\r\n          name=\"firstname\"\r\n          pattern=\"[A-Za-z]+\"\r\n        />\r\n        <span>First Name</span>\r\n        <div\r\n          *ngIf=\"!firstname.valid && registerForm.submitted\"\r\n          class=\"invalid-tooltip\"\r\n        >\r\n          First Name is required!\r\n        </div>\r\n        <div *ngIf=\"firstname?.errors?.pattern\" class=\"invalid-tooltip\">\r\n          First Name should not be number.\r\n        </div>\r\n      </label>\r\n      <label class=\"form-group has-float-label\">\r\n        <input\r\n          class=\"form-control\"\r\n          required\r\n          ngModel\r\n          #lastname=\"ngModel\"\r\n          name=\"lastname\"\r\n        />\r\n        <span>Last Name</span>\r\n        <div\r\n          *ngIf=\"!lastname.valid && registerForm.submitted\"\r\n          class=\"invalid-tooltip\"\r\n        >\r\n          Last Name is required!\r\n        </div>\r\n        <div *ngIf=\"lastname?.errors?.pattern\" class=\"invalid-tooltip\">\r\n          Last Name should not be number.\r\n        </div>\r\n      </label>\r\n      <label class=\"form-group has-float-label\">\r\n        <input\r\n          class=\"form-control\"\r\n          required\r\n          email\r\n          ngModel\r\n          #email=\"ngModel\"\r\n          name=\"email\"\r\n        />\r\n        <span>Email</span>\r\n        <div\r\n          *ngIf=\"!email.valid && registerForm.submitted\"\r\n          class=\"invalid-tooltip\"\r\n        >\r\n          Email is required!\r\n        </div>\r\n        <div\r\n          *ngIf=\"email?.errors?.email && registerForm.submitted\"\r\n          class=\"invalid-tooltip\"\r\n        >\r\n          Email must be a valid address!\r\n        </div>\r\n      </label>\r\n      <label class=\"form-group has-float-label\">\r\n        <input\r\n          class=\"form-control\"\r\n          required\r\n          ngModel\r\n          #mobile=\"ngModel\"\r\n          name=\"mobile\"\r\n          pattern=\"[0-9]{10}\"\r\n        />\r\n        <span>Mobile</span>\r\n        <div\r\n          *ngIf=\"!mobile.valid && registerForm.submitted\"\r\n          class=\"invalid-tooltip\"\r\n        >\r\n          Mobile is required!\r\n        </div>\r\n        <div *ngIf=\"mobile?.errors?.pattern\" class=\"invalid-tooltip\">\r\n          Mobile should be 10 digits.\r\n        </div>\r\n      </label>\r\n      <label class=\"form-group has-float-label\">\r\n        <input\r\n          class=\"form-control\"\r\n          required\r\n          ngModel\r\n          #subdomain=\"ngModel\"\r\n          name=\"subdomain\"\r\n        />\r\n        <span>Subdomain</span>\r\n        <div\r\n          *ngIf=\"!subdomain.valid && registerForm.submitted\"\r\n          class=\"invalid-tooltip\"\r\n        >\r\n          Subdomain is required!\r\n        </div>\r\n      </label>\r\n      <label class=\"form-group has-float-label\">\r\n        <input\r\n          class=\"form-control\"\r\n          required\r\n          ngModel\r\n          #company=\"ngModel\"\r\n          name=\"company\"\r\n        />\r\n        <span>Company</span>\r\n        <div\r\n          *ngIf=\"!company.valid && registerForm.submitted\"\r\n          class=\"invalid-tooltip\"\r\n        >\r\n          Company is required!\r\n        </div>\r\n      </label>\r\n      <div class=\"d-flex justify-content-between align-items-center\">\r\n        <a routerLink=\"/user/forgot-password\"\r\n          >{{ \"user.forgot-password\" | translate }}?</a\r\n        >\r\n        <app-state-button\r\n          [btnClass]=\"'btn btn-primary btn-lg btn-shadow'\"\r\n          [currentState]=\"buttonState\"\r\n          [isDisabled]=\"!registerForm.valid\"\r\n          click=\"onLoginClick()\"\r\n        >\r\n          {{ \"user.register-button\" | translate | uppercase }}\r\n        </app-state-button>\r\n      </div>\r\n    </form>\r\n  </div>\r\n</div>\r\n<simple-notifications></simple-notifications>\r\n","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { NgForm } from '@angular/forms';\r\nimport { NotificationsService, NotificationType } from 'angular2-notifications';\r\nimport { Router } from '@angular/router';\r\nimport { AuthService } from 'src/app/shared/auth.service';\r\n\r\n@Component({\r\n  selector: 'app-reset-password',\r\n  templateUrl: './reset-password.component.html',\r\n})\r\nexport class ResetPasswordComponent implements OnInit {\r\n  @ViewChild('resetForm') resetForm: NgForm;\r\n  emailModel = 'demo@vien.com';\r\n  passwordModel = 'demovien1122';\r\n\r\n  buttonDisabled = false;\r\n  buttonState = '';\r\n\r\n  constructor(\r\n    private authService: AuthService,\r\n    private notifications: NotificationsService,\r\n    private router: Router\r\n  ) {}\r\n\r\n  ngOnInit() {}\r\n\r\n  onSubmit() {\r\n    if (!this.resetForm.valid || this.buttonDisabled) {\r\n      return;\r\n    }\r\n    this.buttonDisabled = true;\r\n    this.buttonState = 'show-spinner';\r\n    /*\r\n    this.authService\r\n      .resetPassword(this.resetForm.value)\r\n      .then((data) => {\r\n        console.log('>>>>: ResetPasswordComponent -> onSubmit -> data', data);\r\n        this.notifications.create(\r\n          'Done',\r\n          'Password reset completed, you will be redirected to Login page!',\r\n          NotificationType.Bare,\r\n          { theClass: 'outline primary', timeOut: 6000, showProgressBar: true }\r\n        );\r\n        this.buttonDisabled = false;\r\n        this.buttonState = '';\r\n        setTimeout(() => {\r\n          this.router.navigate(['user/login']);\r\n        }, 6000);\r\n      })\r\n      .catch((error) => {\r\n        this.buttonDisabled = false;\r\n        this.buttonState = '';\r\n        this.notifications.create(\r\n          'Error',\r\n          error.message,\r\n          NotificationType.Bare,\r\n          { theClass: 'outline primary', timeOut: 6000, showProgressBar: false }\r\n        );\r\n      });\r\n      */\r\n  }\r\n}\r\n","<div class=\"card auth-card\">\r\n  <div class=\"position-relative image-side \">\r\n    <p class=\" text-white h2\">MAGIC IS IN THE DETAILS</p>\r\n    <p class=\"white mb-0\">\r\n      Please enter a new password.\r\n      <br>If you are not a member, please\r\n      <a routerLink=\"/user/register\" class=\"white white-underline-link\">register</a>.\r\n    </p>\r\n  </div>\r\n  <div class=\"form-side\">\r\n    <a class=\"c-pointer\">\r\n      <span class=\"logo-single\"></span>\r\n    </a>\r\n    <h6 class=\"mb-4\">Reset Password</h6>\r\n\r\n    <form #resetForm=\"ngForm\" novalidate (ngSubmit)=\"onSubmit()\">\r\n      <label class=\"form-group has-float-label\">\r\n        <input class=\"form-control\" type=\"text\" placeholder=\"\" required ngModel #code=\"ngModel\" name=\"code\" />\r\n        <span>{{ 'user.code' | translate }}</span>\r\n        <div *ngIf=\"!code.valid && resetForm.submitted\" class=\"invalid-tooltip\">Code is required!</div>\r\n      </label>\r\n      <label class=\"form-group has-float-label\">\r\n        <input class=\"form-control\" type=\"password\" placeholder=\"\" required ngModel #newPassword=\"ngModel\"\r\n          name=\"newPassword\" />\r\n        <span>{{ 'user.password' | translate }}</span>\r\n        <div *ngIf=\"!newPassword.valid && resetForm.submitted\" class=\"invalid-tooltip\">Password is required!</div>\r\n      </label>\r\n      <div class=\"d-flex justify-content-between align-items-center\">\r\n        <a routerLink=\"/user/forgot-password\">{{ 'user.forgot-password' | translate }}?</a>\r\n        <app-state-button [btnClass]=\"'btn btn-primary btn-lg btn-shadow'\" [currentState]=\"buttonState\"\r\n          [isDisabled]=\"buttonDisabled\" click=\"onLoginClick()\">\r\n          {{ 'user.reset-password-button' | translate | uppercase }}\r\n        </app-state-button>\r\n      </div>\r\n    </form>\r\n\r\n  </div>\r\n</div>\r\n<simple-notifications></simple-notifications>\r\n","import { Component, OnInit, OnDestroy, Renderer2 } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-user',\r\n  templateUrl: './user.component.html'\r\n})\r\nexport class UserComponent implements OnInit, OnDestroy {\r\n\r\n  constructor(private renderer: Renderer2) { }\r\n\r\n  ngOnInit() {\r\n    this.renderer.addClass(document.body, 'background');\r\n    this.renderer.addClass(document.body, 'no-footer');\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.renderer.removeClass(document.body, 'background');\r\n    this.renderer.removeClass(document.body, 'no-footer');\r\n  }\r\n}\r\n","<div class=\"fixed-background\"></div>\r\n<main>\r\n  <div class=\"container\">\r\n    <div class=\"row h-100\">\r\n      <div class=\"col-12 col-md-10 mx-auto my-auto\">\r\n        <router-outlet></router-outlet>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</main>\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { LoginComponent } from './login/login.component';\r\nimport { RegisterComponent } from './register/register.component';\r\nimport { ForgotPasswordComponent } from './forgot-password/forgot-password.component';\r\nimport { UserComponent } from './user.component';\r\nimport { UserRoutingModule } from './user.routing';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { SharedModule } from 'src/app/shared/shared.module';\r\nimport { SimpleNotificationsModule } from 'angular2-notifications';\r\nimport { ResetPasswordComponent } from './reset-password/reset-password.component';\r\nimport { ComponentsStateButtonModule } from 'src/app/components/state-button/components.state-button.module';\r\n\r\n@NgModule({\r\n  declarations: [LoginComponent, RegisterComponent, ForgotPasswordComponent, UserComponent, ResetPasswordComponent],\r\n  imports: [\r\n    CommonModule,\r\n    UserRoutingModule,\r\n    FormsModule,\r\n    SharedModule,\r\n    SimpleNotificationsModule.forRoot(),\r\n    ComponentsStateButtonModule\r\n  ]\r\n})\r\nexport class UserModule { }\r\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { UserComponent } from './user.component';\r\nimport { LoginComponent } from './login/login.component';\r\nimport { RegisterComponent } from './register/register.component';\r\nimport { ForgotPasswordComponent } from './forgot-password/forgot-password.component';\r\nimport { ResetPasswordComponent } from './reset-password/reset-password.component';\r\n\r\nconst routes: Routes = [\r\n    {\r\n        path: '', component: UserComponent,\r\n        children: [\r\n            { path: '', redirectTo: 'login', pathMatch: 'full' },\r\n            { path: 'login', component: LoginComponent },\r\n            { path: 'register', component: RegisterComponent },\r\n            { path: 'forgot-password', component: ForgotPasswordComponent },\r\n            { path: 'reset-password', component: ResetPasswordComponent }\r\n        ]\r\n    }\r\n];\r\n\r\n@NgModule({\r\n    imports: [RouterModule.forChild(routes)],\r\n    exports: [RouterModule]\r\n})\r\nexport class UserRoutingModule { }\r\n"],"sourceRoot":"webpack:///"}